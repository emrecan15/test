package com.filmonersene.website.controllers;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.filmonersene.website.dtos.request.SaveMovieRequest;
import com.filmonersene.website.dtos.response.GetMoviesResponse;
import com.filmonersene.website.dtos.response.SaveMovieResponse;
import com.filmonersene.website.entities.User;
import com.filmonersene.website.repositories.MovieRepository;
import com.filmonersene.website.repositories.UserRepository;
import com.filmonersene.website.services.abstracts.MovieService;


import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/api/movies")
@AllArgsConstructor
public class MovieController {
	
	private final MovieService movieService;
	private final UserRepository userRepository;

	//@PreAuthorize("hasRole('ADMIN') or hasRole('USER')")
	@PostMapping("/save")
	public ResponseEntity<SaveMovieResponse> saveMovie(@RequestBody SaveMovieRequest saveMovieRequest){
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String email = authentication.getName();
		
		User user = userRepository.findByEmail(email)
				.orElseThrow(() -> new UsernameNotFoundException("Kullanıcı bulunamadı"));
		
		
		return ResponseEntity.ok(movieService.saveMovie(saveMovieRequest,user));
	}
	
	@GetMapping("/")
	public ResponseEntity<List<GetMoviesResponse>> getMovies(){
		return ResponseEntity.ok(movieService.getAllMovies());
	}
}
