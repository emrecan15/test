package com.filmonersene.website.services.concretes;

import org.springframework.stereotype.Service;

import com.filmonersene.website.dtos.request.CreateUserRequest;
import com.filmonersene.website.dtos.request.LoginRequest;
import com.filmonersene.website.dtos.response.CreateUserResponse;
import com.filmonersene.website.dtos.response.LoginResponse;
import com.filmonersene.website.entities.Role;
import com.filmonersene.website.entities.Tag;
import com.filmonersene.website.entities.User;
import com.filmonersene.website.repositories.RoleRepository;
import com.filmonersene.website.repositories.TagRepository;
import com.filmonersene.website.repositories.UserRepository;
import com.filmonersene.website.services.abstracts.UserService;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class UserManager implements UserService {
	
	
	private final UserRepository userRepository;
	private final TagRepository tagRepository;
	private final RoleRepository roleRepository;
	
	
	
	@Override
	public CreateUserResponse createUser(CreateUserRequest createUserRequest) {
		User user = new User();
		user.setUsername(createUserRequest.getUsername());
		user.setName(createUserRequest.getName());
		user.setEmail(createUserRequest.getEmail());
		user.setSurname(createUserRequest.getSurname());
		user.setPassword(createUserRequest.getPassword());
		
		Tag tag = tagRepository.findById(1L)
				.orElseThrow(() -> new RuntimeException("Tag bulunamadı"));
		
		user.setTag(tag);
		
		Role role = roleRepository.findById(1L)
				.orElseThrow(() -> new RuntimeException("Rol bulunamadı"));
		user.setRole(role);
		userRepository.save(user);

		
		return new CreateUserResponse("Kayıt Başarılı");
	}



	
	
	

}
