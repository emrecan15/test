package com.filmonersene.website.controllers;


import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.filmonersene.website.dtos.request.LoginRequest;
import com.filmonersene.website.repositories.UserRepository;
import com.filmonersene.website.security.JwtUtil;


import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/api/auth")
@AllArgsConstructor
public class AuthController {
	
	private final AuthenticationManager authenticationManager;
	private final UserRepository userRepository;
	private final JwtUtil jwtUtil;
	
	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest){
		try {
		Authentication authentication= authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(loginRequest.getEmail(),loginRequest.getPassword()));
		
		UserDetails userDetails = (UserDetails) authentication.getPrincipal();
		
		String token = jwtUtil.generateToken(loginRequest.getEmail());
		
		return ResponseEntity.ok(Map.of("token",token,"username",userDetails.getUsername(),"roles",userDetails.getAuthorities()));
		
		}
		catch (BadCredentialsException e) {
			return ResponseEntity.status(401).body("Invalid Credentials");
		}
		catch (Exception e) {
			return ResponseEntity.status(500).body("Authentication Failed.");
		}
		
	}
	
}
