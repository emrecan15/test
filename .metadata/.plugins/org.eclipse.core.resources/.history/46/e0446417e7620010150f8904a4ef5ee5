package com.filmonersene.website.services.concretes;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import com.filmonersene.website.dtos.request.GenreDTO;
import com.filmonersene.website.dtos.request.SaveMovieRequest;
import com.filmonersene.website.dtos.response.GetMoviesResponse;
import com.filmonersene.website.dtos.response.RecommendedByDto;
import com.filmonersene.website.dtos.response.SaveMovieResponse;
import com.filmonersene.website.entities.Genre;
import com.filmonersene.website.entities.Movie;
import com.filmonersene.website.entities.MovieLike;
import com.filmonersene.website.entities.User;
import com.filmonersene.website.repositories.GenreRepository;
import com.filmonersene.website.repositories.MovieLikeRepository;
import com.filmonersene.website.repositories.MovieRepository;
import com.filmonersene.website.repositories.UserRepository;
import com.filmonersene.website.services.abstracts.MovieService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MovieManager implements MovieService {
	
	private final MovieRepository movieRepository;
	private final GenreRepository genreRepository;
	private final MovieLikeRepository movieLikeRepository;
	private final UserRepository userRepository;


	@Override
	public SaveMovieResponse saveMovie(SaveMovieRequest saveMovieRequest,User user) {
		if(movieRepository.existsByImdbId(saveMovieRequest.getImdbId()))
		{
			return new SaveMovieResponse("Bu film daha önce eklenmiş.");
		}
	
		Movie movie = new Movie();
		movie.setPosterUrl(saveMovieRequest.getPosterUrl());
		movie.setBackdropUrl(saveMovieRequest.getBackdropUrl());
		movie.setMovieName(saveMovieRequest.getMovieName());
		movie.setOriginalTitle(saveMovieRequest.getOriginalTitle());
		movie.setDescription(saveMovieRequest.getDescription());
		movie.setReleaseDate(saveMovieRequest.getReleaseDate());
		movie.setRuntime(saveMovieRequest.getRuntime());
		movie.setImdbId(saveMovieRequest.getImdbId());
		movie.setVoteAverage(saveMovieRequest.getVoteAverage());
		movie.setOriginalLanguage(saveMovieRequest.getOriginalLanguage());
		movie.setCountry(saveMovieRequest.getCountry());
		movie.setPopularity(saveMovieRequest.getPopularity());
		movie.setUserComment(saveMovieRequest.getUserComment());
		movie.setDirector(saveMovieRequest.getDirector());
		movie.setRecommendedBy(user);
		
		Set<Genre> genres = new HashSet<>();

	    for (GenreDTO genreDto : saveMovieRequest.getGenres()) {
	        Genre genre = genreRepository.findByTmdbId(genreDto.getTmdbId())
	                .orElseGet(() -> {
	                    Genre newGenre = new Genre();
	                    newGenre.setTmdbId(genreDto.getTmdbId());
	                    newGenre.setName(genreDto.getName());
	                    return genreRepository.save(newGenre);
	                });

	        genres.add(genre);
	    }

	    movie.setGenres(genres);

	    movieRepository.save(movie);

	    return new SaveMovieResponse("Film başarıyla kaydedildi.");

	}

/*
	@Override
	public List<GetMoviesResponse> getAllMovies() {
		
        List<Movie> movies = movieRepository.findTop7ByOrderByCreatedAtDesc();

        return movies.stream()
            .map(this::convertToDto)
            .collect(Collectors.toList());
	}
	
	private GetMoviesResponse convertToDto(Movie movie) {

        Set<GenreDTO> genres = movie.getGenres().stream()
            .map(genre -> new GenreDTO(genre.getTmdbId(), genre.getName()))
            .collect(Collectors.toSet());

        RecommendedByDto recommendedBy = null;
        if (movie.getRecommendedBy() != null) {
            recommendedBy = new RecommendedByDto(
                movie.getRecommendedBy().getId(),
                movie.getRecommendedBy().getUsername(),
                movie.getRecommendedBy().getTag() != null ? movie.getRecommendedBy().getTag().getName() : null
            );
        }
        Double voteAverage = movie.getVoteAverage();
        if(voteAverage != null)
        {
        	voteAverage = Math.round(movie.getVoteAverage() * 10) / 10.0;
        }
        

        
        return new GetMoviesResponse(
            movie.getId(),
            movie.getPosterUrl(),
            movie.getMovieName(),
            voteAverage,
            genres,
            recommendedBy
        );
    }

*/
	@Override
	public List<GetMoviesResponse> getAllMovies(UserDetails userDetails, String guestId) {
	    List<Movie> movies = movieRepository.findTop7ByOrderByCreatedAtDesc();

	    return movies.stream()
	        .map(movie -> convertToDto(movie, userDetails, guestId))
	        .collect(Collectors.toList());
	}

	private GetMoviesResponse convertToDto(Movie movie, UserDetails userDetails, String guestId) {
	    Set<GenreDTO> genres = movie.getGenres().stream()
	        .map(genre -> new GenreDTO(genre.getTmdbId(), genre.getName()))
	        .collect(Collectors.toSet());

	    RecommendedByDto recommendedBy = null;
	    if (movie.getRecommendedBy() != null) {
	        recommendedBy = new RecommendedByDto(
	            movie.getRecommendedBy().getId(),
	            movie.getRecommendedBy().getUsername(),
	            movie.getRecommendedBy().getTag() != null ? movie.getRecommendedBy().getTag().getName() : null
	        );
	    }

	    Double voteAverage = movie.getVoteAverage();
	    if (voteAverage != null) {
	        voteAverage = Math.round(voteAverage * 10) / 10.0;
	    }

	    long likeCount = movieLikeRepository.countByMovieAndLiked(movie, true);
	    long dislikeCount = movieLikeRepository.countByMovieAndLiked(movie, false);

	    boolean likedByUser = true;
	    boolean dislikedByUser = false;
	    System.out.println("UserDetails: " + userDetails);
	    if (userDetails != null) {
	        System.out.println("User email: " + userDetails.getUsername());

	        Optional<User> userOpt = userRepository.findByEmail(userDetails.getUsername());
	        if (userOpt.isPresent()) {
	            Optional<MovieLike> likeOpt = movieLikeRepository.findByUserAndMovie(userOpt.get(), movie);
	            System.out.println("likeOpt presence: " + likeOpt.isPresent());
	            if (likeOpt.isPresent()) {
	            	System.out.println("User like: " + likeOpt.get().isLiked());
	                likedByUser = likeOpt.get().isLiked();
	                dislikedByUser = !likedByUser;
	            }
	        }
	    } else if (guestId != null && !guestId.isBlank()) {
	        Optional<MovieLike> likeOpt = movieLikeRepository.findByGuestIdAndMovie(guestId, movie);
	        if (likeOpt.isPresent()) {
	            likedByUser = likeOpt.get().isLiked();
	            dislikedByUser = !likedByUser;
	        }
	    }

	    return new GetMoviesResponse(
	        movie.getId(),
	        movie.getPosterUrl(),
	        movie.getMovieName(),
	        voteAverage,
	        genres,
	        recommendedBy,
	        (int) likeCount,
	        (int) dislikeCount,
	        likedByUser,
	        dislikedByUser
	    );
	}



	@Override
	public ResponseEntity<?> voteMovie(Long movieId, UserDetails userDetails, String guestId, boolean isLike) {
		Optional<Movie> movieOpt = movieRepository.findById(movieId);
	    if (movieOpt.isEmpty()) {
	        return ResponseEntity.notFound().build();
	    }
	    Movie movie = movieOpt.get();

	    if (userDetails != null) {
	        return handleUserVote(userDetails, movie, isLike);
	    } else if (guestId != null && !guestId.isBlank()) {
	        return handleGuestVote(guestId, movie, isLike);
	    } else {
	        return ResponseEntity.badRequest().body("Guest ID missing");
	    }
	}
	
	private ResponseEntity<?> handleUserVote(UserDetails userDetails, Movie movie, boolean isLike) {
	    User user = userRepository.findByEmail(userDetails.getUsername())
	            .orElseThrow(() -> new RuntimeException("User not found"));

	    Optional<MovieLike> existingOpt = movieLikeRepository.findByUserAndMovie(user, movie);

	    if (existingOpt.isPresent()) {
	        MovieLike existing = existingOpt.get();
	        if (existing.isLiked() == isLike) {
	            // Aynı oy tekrarlandı → sil (nötr)
	            movieLikeRepository.delete(existing);
	            decrementMovieOwnerScore(movie);
	            return ResponseEntity.ok("Oy geri çekildi (nötr oldu)");
	        } else {
	            // Farklı oy → güncelle
	            existing.setLiked(isLike);
	            movieLikeRepository.save(existing);
	            // Puan güncellemesi senin isteğine göre yapılabilir (increment/decrement)
	            return ResponseEntity.ok("Oy güncellendi");
	        }
	    } else {
	        // Yeni oy
	        MovieLike like = new MovieLike();
	        like.setUser(user);
	        like.setMovie(movie);
	        like.setLiked(isLike);
	        movieLikeRepository.save(like);

	        incrementMovieOwnerScore(movie);
	        return ResponseEntity.ok("Oy verildi");
	    }
	}

	private ResponseEntity<?> handleGuestVote(String guestId, Movie movie, boolean isLike) {
	    Optional<MovieLike> existingOpt = movieLikeRepository.findByGuestIdAndMovie(guestId, movie);

	    if (existingOpt.isPresent()) {
	        MovieLike existing = existingOpt.get();
	        if (existing.isLiked() == isLike) {
	            movieLikeRepository.delete(existing);
	            decrementMovieOwnerScore(movie);
	            return ResponseEntity.ok("Oy geri çekildi (nötr oldu)");
	        } else {
	            existing.setLiked(isLike);
	            movieLikeRepository.save(existing);
	            return ResponseEntity.ok("Oy güncellendi");
	        }
	    } else {
	        MovieLike like = new MovieLike();
	        like.setGuestId(guestId);
	        like.setMovie(movie);
	        like.setLiked(isLike);
	        movieLikeRepository.save(like);

	        incrementMovieOwnerScore(movie);
	        return ResponseEntity.ok("Oy verildi");
	    }
	}
	
	private void incrementMovieOwnerScore(Movie movie) {
        User user = movie.getRecommendedBy();
        /*
        if (user != null && movie.getRecommendedBy().getId().equals(user.getId())) {
            return; 
        }
        */
        System.out.println("Kullanıcının like öncesi puanı : "+user.getPoints());
        user.setPoints(user.getPoints()+1);
        System.out.println("Like sonrası : "+user.getPoints());
        userRepository.save(user);
    }
	
	private void decrementMovieOwnerScore(Movie movie) {
	    User user = movie.getRecommendedBy();
	    if (user == null) return;
	    user.setPoints(Math.max(user.getPoints() - 1, 0));
	    userRepository.save(user);
	}
	
	
	public ResponseEntity<?> getVoteStatus(Long movieId, UserDetails userDetails, String guestId) {
	    Optional<Movie> movieOpt = movieRepository.findById(movieId);
	    if (movieOpt.isEmpty()) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Film bulunamadı");
	    }

	    Movie movie = movieOpt.get();

	    long likeCount = movieLikeRepository.countByMovieAndLiked(movie, true);
	    long dislikeCount = movieLikeRepository.countByMovieAndLiked(movie, false);

	    boolean likedByUser = false;
	    boolean dislikedByUser = false;

	    if (userDetails != null) {
	        Optional<User> userOpt = userRepository.findByEmail(userDetails.getUsername());
	        if (userOpt.isPresent()) {
	            Optional<MovieLike> likeOpt = movieLikeRepository.findByUserAndMovie(userOpt.get(), movie);
	            if (likeOpt.isPresent()) {
	                likedByUser = likeOpt.get().isLiked();
	                dislikedByUser = !likedByUser;
	            }
	        }
	    } else if (guestId != null && !guestId.isBlank()) {
	        Optional<MovieLike> likeOpt = movieLikeRepository.findByGuestIdAndMovie(guestId, movie);
	        if (likeOpt.isPresent()) {
	            likedByUser = likeOpt.get().isLiked();
	            dislikedByUser = !likedByUser;
	        }
	    }

	    Map<String, Object> result = new HashMap<>();
	    result.put("likes", likeCount);
	    result.put("dislikes", dislikeCount);
	    result.put("likedByUser", likedByUser);
	    result.put("dislikedByUser", dislikedByUser);

	    return ResponseEntity.ok(result);
	}


}
